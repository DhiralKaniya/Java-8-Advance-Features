package com.session.stream;

import java.sql.Date;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import com.session.utility.Person;
public class strem_filter {
	
	public static void main(String[] args) {
		List<Person> persons = Arrays.asList( 
				new Person(1, "test1",10),
				new Person(2, "test2",20),
				new Person(3, "test1",30)
				);
		
		/**
		 * Basic example with stream
		 * 1 :- Filter
		 * 2 :- max, min
		 * 3 :- IntStream and overview about DoubleStream and LongStream
		 * 4 :- ForEach
		 * 5 :- Map to the list, set and map
		 * 6 :- paraellelStream example 
		 */
		
		
		printCurrentTime();
		List<String> mydata = Utility.getStringList();
		List<String> filterData = mydata.stream().sorted().collect(Collectors.toList());
		System.out.println(filterData);
		
		System.out.println(mydata.stream().anyMatch(e->e.equals("test")));
		
		//IntStream.range(1, 1000).forEach(n -> System.out.print(n));
		Map<Integer, Person> myHashMap = persons.stream().collect(Collectors.toMap(p->p.id, p->p));
		
		
		
	}
	public static void printCurrentTime() {
		System.out.println(LocalDateTime.now());
	}
	public static void paralleProgram() {
		
		List<Integer> listofthousand = 
		ForkJoinPool pool = new ForkJoinPool(10);
		pool.submit()
	}
	private static List<Integer> get1000IntegerList(){
		List<Integer> listofthousand = new ArrayList<Integer>();
		
		}
	}
}
